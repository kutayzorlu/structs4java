/*
 * generated by Xtext 2.10.0
 */
package org.structs4java.generator

import org.structs4java.structs4JavaDsl.EnumDeclaration
import org.structs4java.structs4JavaDsl.Package
import org.structs4java.structs4JavaDsl.Item

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class EnumGenerator {

	def compile(Package pkg, EnumDeclaration enumDecl) '''
		«packageDeclaration(pkg)»
		
		«printComments(enumDecl)»
		public enum «enumDecl.name» {
			
			«items(enumDecl)»
			
			«reader(enumDecl)»
			«writer(enumDecl)»
			
			private «enumDecl.name»(int value) {
				this.value = value;
			}
			
			private int value;
		}
	'''
	
	def printComments(EnumDeclaration typeDecl) '''
	/**
	«FOR comment : typeDecl.comments»
	* «comment.substring(2).trim()»
	«ENDFOR»
	*/
	'''
	
	def printComments(Item item) '''
	/**
	«FOR comment : item.comments»
	* «comment.substring(2).trim()»
	«ENDFOR»
	*/
	'''

	def items(EnumDeclaration enumDecl) '''
		«FOR i : enumDecl.items SEPARATOR "," AFTER ";"»
			«printComments(i)»
			«i.name»(«i.value»)
		«ENDFOR»
	'''

	def reader(EnumDeclaration enumDecl) '''
		public static «enumDecl.name» read(java.nio.ByteBuffer buf, boolean partialRead) throws java.io.IOException {
			return read(buf);
		}
		
		public static «enumDecl.name» read(java.nio.ByteBuffer buf) throws java.io.IOException {
			«read(enumDecl)»
			switch(value) {
				«FOR f : enumDecl.items»
					case «f.value»: return «f.name»;
				«ENDFOR»
				default: throw new java.io.IOException(String.format("Unknown enum value: 0x%X", value));
			}
		}
	'''

	def read(EnumDeclaration enumDecl) {
		switch (enumDecl.typename) {
			case "int8_t": '''int value = buf.get();'''
			case "uint8_t": '''int value = buf.get() & 0xFF;'''
			case "int16_t": '''int value = buf.getShort();'''
			case "uint16_t": '''int value = buf.getShort() & 0xFFFF;'''
			case "int32_t": '''int value = buf.getInt();'''
			case "uint32_t": '''int value = buf.getInt() & 0xFFFFFFFF;'''
			case "int64_t": throw new RuntimeException("64bit enums not supported")
			case "uint64_t": throw new RuntimeException("64bit enums not supported")
		}
	}

	def writer(EnumDeclaration enumDecl) '''
		public void write(java.nio.ByteBuffer buf) throws java.io.IOException {
			«write(enumDecl)»
		}
	'''

	def write(EnumDeclaration enumDecl) {
		switch (enumDecl.typename) {
			case "int8_t": '''buf.put((byte)(this.value & 0xFF));'''
			case "uint8_t": '''buf.put((byte)(this.value & 0xFF));'''
			case "int16_t": '''buf.putShort((short)(this.value & 0xFFFF));'''
			case "uint16_t": '''buf.putShort((short)(this.value & 0xFFFF));'''
			case "int32_t": '''buf.putInt(this.value & 0xFFFFFFFF);'''
			case "uint32_t": '''buf.putInt(this.value & 0xFFFFFFFF);'''
			case "int64_t": throw new RuntimeException("64bit enums not supported")
			case "uint64_t": throw new RuntimeException("64bit enums not supported")
		}
	}

	def packageDeclaration(Package pkg) '''
		«IF !pkg.name.empty»
			package «pkg.name»;
		«ENDIF»
	'''
}
