/*
 * generated by Xtext 2.10.0
 */
package org.structs4java.generator

import org.structs4java.structs4JavaDsl.ComplexTypeDeclaration
import org.structs4java.structs4JavaDsl.ComplexTypeMember
import org.structs4java.structs4JavaDsl.FloatMember
import org.structs4java.structs4JavaDsl.IntegerMember
import org.structs4java.structs4JavaDsl.Member
import org.structs4java.structs4JavaDsl.Package
import org.structs4java.structs4JavaDsl.StringMember
import org.structs4java.structs4JavaDsl.StructDeclaration

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class StructGenerator {

	def compile(Package pkg, StructDeclaration struct) '''
		«packageDeclaration(pkg)»
		
		public class «struct.name» {
			
			«fields(struct)»
			
			public «struct.name»() {
			}
			
			«getters(struct)»
			«setters(struct)»
			
			«readerMethodForStruct(struct)»
			«writerMethodForStruct(struct)»
			
			«toStringMethod(struct)»
			
			«readerMethods(struct)»
			«writerMethods(struct)»
			
			«hashCodeMethod(struct)»
			«equalsMethod(struct)»
		}
	'''
	
	def hashCodeMethod(StructDeclaration struct) '''
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		«FOR m : struct.members»
		«IF m instanceof StringMember || m instanceof ComplexTypeDeclaration || m.isArray()»
		result = prime * result + ((this.«attributeName(m)» == null) ? 0 : this.«attributeName(m)».hashCode());
		«ELSEIF m instanceof IntegerMember»
		«IF (m as IntegerMember).typename.equals("int8_t") || (m as IntegerMember).typename.equals("uint8_t")»
		result = prime * result + this.«attributeName(m)»;
		«ELSEIF (m as IntegerMember).typename.equals("int16_t") || (m as IntegerMember).typename.equals("uint16_t")»
		result = prime * result + this.«attributeName(m)»;
		«ELSEIF (m as IntegerMember).typename.equals("int32_t") || (m as IntegerMember).typename.equals("uint32_t")»
		result = prime * result + this.«attributeName(m)»;
		«ELSEIF (m as IntegerMember).typename.equals("int64_t") || (m as IntegerMember).typename.equals("uint64_t")»
		result = prime * result + (int) (this.«attributeName(m)» ^ (this.«attributeName(m)» >>> 32));
		«ENDIF»
		«ELSEIF m instanceof FloatMember»
		«IF (m as FloatMember).typename.equals("float")»
		result = prime * result + Float.floatToIntBits(this.«attributeName(m)»);
		«ELSEIF (m as FloatMember).typename.equals("double")»
		{
			long temp;
			temp = Double.doubleToLongBits(this.«attributeName(m)»);
			result = prime * result + (int) (temp ^ (temp >>> 32));
		}
		«ENDIF»
		«ENDIF»	
		«ENDFOR»	
		return result;
	}
	'''
	
	def equalsMethod(StructDeclaration struct) '''
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		«struct.name» other = («struct.name») obj;
		
		«FOR m : struct.members»
		«IF m instanceof StringMember || m instanceof ComplexTypeDeclaration || m.isArray()»
		if (this.«attributeName(m)» == null) {
			if (other.«attributeName(m)» != null)
				return false;
		} else if (!this.«attributeName(m)».equals(other.«attributeName(m)»))
			return false;
		«ELSEIF m instanceof IntegerMember»
		«IF (m as IntegerMember).typename.equals("int8_t") || (m as IntegerMember).typename.equals("uint8_t")»
		if (this.«attributeName(m)» != other.«attributeName(m)»)
			return false;
		«ELSEIF (m as IntegerMember).typename.equals("int16_t") || (m as IntegerMember).typename.equals("uint16_t")»
		if (this.«attributeName(m)» != other.«attributeName(m)»)
			return false;
		«ELSEIF (m as IntegerMember).typename.equals("int32_t") || (m as IntegerMember).typename.equals("uint32_t")»
		if (this.«attributeName(m)» != other.«attributeName(m)»)
			return false;
		«ELSEIF (m as IntegerMember).typename.equals("int64_t") || (m as IntegerMember).typename.equals("uint64_t")»
		if (this.«attributeName(m)» != other.«attributeName(m)»)
			return false;
		«ENDIF»
		«ELSEIF m instanceof FloatMember»
		«IF (m as FloatMember).typename.equals("float")»
		if (Float.floatToIntBits(this.«attributeName(m)») != Float.floatToIntBits(other.«attributeName(m)»))
			return false;
		«ELSEIF (m as FloatMember).typename.equals("double")»
		if (Double.doubleToLongBits(this.«attributeName(m)») != Double.doubleToLongBits(other.«attributeName(m)»))
			return false;
		«ENDIF»
		«ENDIF»	
		«ENDFOR»
		return true;
	}
	'''
	
	def toStringMethod(StructDeclaration struct) '''
	public String toString() {
		StringBuilder buf = new StringBuilder("«javaType(struct)»[");
		«FOR m : struct.members SEPARATOR "buf.append(\", \");"»
			buf.append("«attributeName(m)»=" + «getterName(m)»());
		«ENDFOR»
		buf.append("]");
		return buf.toString();
	}
	'''
	
	def readerMethods(StructDeclaration struct) '''
		«FOR m : struct.members»
			«readerMethodForMember(m)»
		«ENDFOR»
	'''

	def readerMethodForStruct(StructDeclaration struct) '''
		public static «struct.name» read(java.nio.ByteBuffer buf) throws java.io.IOException {
			«struct.name» obj = new «struct.name»();
			«FOR m : struct.members»
			obj.«setterName(m)»(«readerMethodName(m)»(buf));
			«ENDFOR»
			return obj;
		}
	'''
	
	def readerMethodName(Member m) {
		return "read" + m.name.toFirstUpper;
	}

	def isArray(Member m) {
		return m.array != null
	}

	def findMemberDefiningSizeOf(Member m) {
		val struct = m.eContainer as StructDeclaration;
		for (member : struct.members) {
			if (member instanceof IntegerMember) {
				val imem = member as IntegerMember
				if (imem.sizeof.contains(m)) {
					return imem
				}
			}
		}
		return null
	}

	def setterName(Member m) {
		return "set" + attributeName(m).toFirstUpper();
	}

	def getterName(Member m) {
		return "get" + attributeName(m).toFirstUpper();
	}

	def attributeName(Member m) {
		return m.name;
	}

	def readerMethodForMember(Member m) {
		if(isArray(m)) {
			switch (m) {
				IntegerMember case m.typename == "uint8_t": readerMethodForByteBuffer(m as IntegerMember)
				IntegerMember case m.typename == "int8_t": readerMethodForByteBuffer(m as IntegerMember)
				StringMember: readerMethodForStringMember(m as StringMember)
				default: readerMethodForArrayMember(m)
			}
		} else  {
			readerMethodForPrimitive(m)		
		}
	}
	
	def readerMethodForPrimitive(Member m) {
		switch (m) {
			ComplexTypeMember: readerMethodForComplexTypeMember(m as ComplexTypeMember)
			IntegerMember: readerMethodForIntegerMember(m as IntegerMember)
			FloatMember: readerMethodForFloatMember(m as FloatMember)
			StringMember: readerMethodForStringMember(m as StringMember)
		}
	}
	
	def readerMethodForArrayMember(Member m) '''
	private static java.util.ArrayList<«m.nativeTypeName().native2JavaType().box()»> «m.readerMethodName()»(java.nio.ByteBuffer buf) throws java.io.IOException {
		java.util.ArrayList<«m.nativeTypeName().native2JavaType().box()»> lst = new java.util.ArrayList<«m.nativeTypeName().native2JavaType().box()»>();
		«IF dimensionOf(m) == 0»
		int arrayLength = «getterName(findMemberDefiningSizeOf(m))»();
		for(int i = 0; i < arrayLength; ++i) {
			lst.add(«readerMethodName(m)»«arrayPostfix(m)»(buf));
		}
		«ELSE»
		«FOR i : 0 ..< dimensionOf(m)»
		lst.add(«readerMethodName(m)»«arrayPostfix(m)»(buf));
		«ENDFOR»
		«ENDIF»
		return lst;
	}
	
	«readerMethodForPrimitive(m)»
	'''
	
	def dimensionOf(Member m) {
		if(m.array == null) {
			return 0;
		}
		return m.array.dimension;
	}
	
	def readerMethodForByteBuffer(IntegerMember m) '''
		private static java.nio.ByteBuffer «readerMethodName(m)»(java.nio.ByteBuffer buf) throws java.io.IOException {
			byte[] buffer = new byte[«m.array.dimension»];
			buf.get(buffer);
			return java.nio.ByteBuffer.wrap(buffer); 
		}
	'''

	def readerMethodForComplexTypeMember(ComplexTypeMember m) '''
		private static «m.nativeTypeName().native2JavaType()» «m.readerMethodName()»«arrayPostfix(m)»(java.nio.ByteBuffer buf) throws java.io.IOException {
			return «m.nativeTypeName().native2JavaType()».read(buf);
		}
	'''
	
	def readerMethodForIntegerMember(IntegerMember m) '''
		private static «m.nativeTypeName().native2JavaType()» «m.readerMethodName()»«arrayPostfix(m)»(java.nio.ByteBuffer buf) throws java.io.IOException {
			«IF m.typename.equals("int8_t")»
			return buf.get();
			«ELSEIF m.typename.equals("uint8_t")»
			return buf.get() & 0xFF;
			«ELSEIF m.typename.equals("int16_t")»
			return buf.getShort();
			«ELSEIF m.typename.equals("uint16_t")»
			return buf.getShort() & 0xFFFF;
			«ELSEIF m.typename.equals("int32_t")»
			return buf.getInt();
			«ELSEIF m.typename.equals("uint32_t")»
			return buf.getInt() & 0xFFFFFFFF;
			«ELSEIF m.typename.equals("int64_t")»
			return buf.getLong();
			«ELSEIF m.typename.equals("uint64_t")»
			return buf.getLong() & 0xFFFFFFFFFFFFFFFFL;
			«ENDIF»
		}
	'''

	def readerMethodForFloatMember(FloatMember m) '''
		private static «m.nativeTypeName().native2JavaType()» «m.readerMethodName()»«arrayPostfix(m)»(java.nio.ByteBuffer buf) throws java.io.IOException {
			«IF m.typename.equals("float")»
			return buf.getFloat();
			«ELSEIF m.typename.equals("double")»
			return buf.getDouble();
			«ENDIF»
		}
	'''

	def readerMethodForStringMember(StringMember m) '''
		private static String «m.readerMethodName()»(java.nio.ByteBuffer buf) throws java.io.IOException {
			try {
			«IF m.array.dimension == 0»
				java.io.ByteArrayOutputStream tmp = new java.io.ByteArrayOutputStream();
				int terminatingZeros = "\0".getBytes("«encodingOf(m)»").length;
				int zerosRead = 0;
				while(zerosRead < terminatingZeros) {
					int b = buf.get();
					tmp.write(b);
					if(b == 0) {
						zerosRead++;
					} else {
						zerosRead = 0;
					}
				}
				return tmp.toString("«encodingOf(m)»");
			«ELSE»
				byte[] tmp = new byte[«dimensionOf(m)»];
				buf.get(tmp);
				int terminatingZeros = "\0".getBytes("«encodingOf(m)»").length;
				int zerosRead = 0;
				int i = 0;
				int len = 0;
				while(zerosRead < terminatingZeros) {
					if(i >= «dimensionOf(m)») {
						len = i;
						break;
					}
					if(tmp[i++] == 0) {
						zerosRead++;
					} else {
						zerosRead = 0;
						len = i;
					}
				}
				return new String(tmp, 0, len, "«encodingOf(m)»");
			«ENDIF»
			} catch(java.io.UnsupportedEncodingException e) {
				throw new java.io.IOException(e);
			}
		}
	'''
	
	def arrayPostfix(Member m) {
		if(m.isArray()) {
			return "_ArrayItem"
		}
		return ""
	}
	
	def writerMethodName(Member m) {
		return "write" + m.name.toFirstUpper;
	}

	def writerMethodForStruct(StructDeclaration struct) '''
		public void write(java.nio.ByteBuffer buf) throws java.io.IOException {
			«FOR m : struct.members»
			«writerMethodName(m)»(buf);
			«ENDFOR»
		}
	'''
	
	def writerMethods(StructDeclaration struct) '''
		«FOR m : struct.members»
			«writerMethodForMember(m)»
		«ENDFOR»
	'''

	def alignField(Member m) '''
		«IF m.align > 1»
			{
				int pos = buf.position();
				int gap = «m.align» - (pos % «m.align»);
				if(gap > 0 && gap != «m.align») {
					buf.position(pos + gap);	
				}
			}
		«ENDIF»
	'''
	
	def writerMethodForMember(Member m) {
		if(isArray(m)) {
			switch (m) {
				IntegerMember case m.typename == "uint8_t": writerMethodForByteBuffer(m as IntegerMember)
				IntegerMember case m.typename == "int8_t": writerMethodForByteBuffer(m as IntegerMember)
				StringMember: writerMethodForString(m as StringMember)
				default: writerMethodForArrayMember(m)
			}
		} else  {
			writerMethodForPrimitive(m)		
		}
	}
	
	def writerMethodForPrimitive(Member m) {
		switch (m) {
			ComplexTypeMember: writerMethodForComplexTypeMember(m as ComplexTypeMember)
			IntegerMember: writerMethodForIntegerMember(m as IntegerMember)
			FloatMember: writerMethodForFloatMember(m as FloatMember)
			StringMember: writerMethodForString(m as StringMember)
		}
	}
	
	def writerMethodForArrayMember(Member m) '''
	private void «m.writerMethodName()»(java.nio.ByteBuffer buf) throws java.io.IOException {
		java.util.ArrayList<«m.nativeTypeName().native2JavaType().box()»> lst = «getterName(m)»();
		«IF dimensionOf(m) == 0»
		for(«m.nativeTypeName().native2JavaType().box()» item : lst) {
			«writerMethodName(m)»«arrayPostfix(m)»(item, buf);
		}
		«ELSE»
		«FOR i : 0 ..< dimensionOf(m)»
		«writerMethodName(m)»«arrayPostfix(m)»(lst.get(«i»), buf);
		«ENDFOR»
		«ENDIF»
	}
	
	«writerMethodForPrimitive(m)»
	'''
	
	def writerMethodForByteBuffer(IntegerMember m) '''
		private void «m.writerMethodName()»(java.nio.ByteBuffer buf) throws java.io.IOException {
			buf.put(«getterName(m)»());
		}
	'''

	def writerMethodForComplexTypeMember(ComplexTypeMember m) '''
		private void «m.writerMethodName()»«arrayPostfix(m)»(«IF m.isArray()»«m.nativeTypeName().native2JavaType()» value, «ENDIF»java.nio.ByteBuffer buf) throws java.io.IOException {
			«IF m.isArray()»value«ELSE»«getterName(m)»()«ENDIF».write(buf);
		}
	'''

	def writerMethodForIntegerMember(IntegerMember m) '''
		private void «m.writerMethodName()»«arrayPostfix(m)»(«IF m.isArray()»«m.nativeTypeName().native2JavaType()» value, «ENDIF»java.nio.ByteBuffer buf) throws java.io.IOException {
			«IF m.typename.equals("int8_t")»
			buf.put((byte)«IF m.isArray()»value«ELSE»«getterName(m)»()«ENDIF»);
			«ELSEIF m.typename.equals("uint8_t")»
			buf.put((byte)«IF m.isArray()»value«ELSE»«getterName(m)»()«ENDIF»);
			«ELSEIF m.typename.equals("int16_t")»
			buf.putShort((short)«IF m.isArray()»value«ELSE»«getterName(m)»()«ENDIF»);
			«ELSEIF m.typename.equals("uint16_t")»
			buf.putShort((short)«IF m.isArray()»value«ELSE»«getterName(m)»()«ENDIF»);
			«ELSEIF m.typename.equals("int32_t")»
			buf.putInt(«IF m.isArray()»value«ELSE»«getterName(m)»()«ENDIF»);
			«ELSEIF m.typename.equals("uint32_t")»
			buf.putInt(«IF m.isArray()»value«ELSE»«getterName(m)»()«ENDIF»);
			«ELSEIF m.typename.equals("int64_t")»
			buf.putLong(«IF m.isArray()»value«ELSE»«getterName(m)»()«ENDIF»);
			«ELSEIF m.typename.equals("uint64_t")»
			buf.putLong(«IF m.isArray()»value«ELSE»«getterName(m)»()«ENDIF»);
			«ENDIF»
		}
	'''

	def writerMethodForFloatMember(FloatMember m) '''
		private void «m.writerMethodName()»«arrayPostfix(m)»(«IF m.isArray()»«m.nativeTypeName().native2JavaType()» value, «ENDIF»java.nio.ByteBuffer buf) throws java.io.IOException {
			«IF m.typename.equals("float")»
			buf.putFloat(«IF m.isArray()»value«ELSE»«getterName(m)»()«ENDIF»);
			«ELSEIF m.typename.equals("double")»
			buf.putDouble(«IF m.isArray()»value«ELSE»«getterName(m)»()«ENDIF»);
			«ENDIF»
		}
	'''

	def writerMethodForString(StringMember m) '''
	private void «writerMethodName(m)»(java.nio.ByteBuffer buf) throws java.io.IOException {
		try {
			byte[] encoded = «getterName(m)»().getBytes("«encodingOf(m)»");
			«IF m.nullTerminated»
			buf.put(encoded);
			buf.put("\0".getBytes("«encodingOf(m)»"));
			«ELSE»
			int len = Math.min(encoded.length, «dimensionOf(m)»);
			int pad = «dimensionOf(m)» - len;
			buf.put(encoded, 0, len);
			if(pad > 0) {
				for(int i = 0; i < pad; ++i) {
					buf.put((byte)0);	
				}
			}
			«ENDIF»
		} catch(java.io.UnsupportedEncodingException e) {
			throw new java.io.IOException(e);
		}
	}
	'''
	
	def encodingOf(StringMember m) {
		if(m.encoding != null) {
			return m.encoding;
		}
		
		return "UTF-8";
	}

	def packageDeclaration(Package pkg) '''
		«IF !pkg.name.empty»
			package «pkg.name»;
		«ENDIF»
	'''

	def fields(StructDeclaration struct) '''
		«FOR f : struct.members»
			«field(f)»
		«ENDFOR»
	'''

	def getters(StructDeclaration struct) '''
		«FOR f : struct.members»
			«getter(f)»
		«ENDFOR»
	'''

	def setters(StructDeclaration struct) '''
		«FOR f : struct.members»
			«setter(f)»
		«ENDFOR»
	'''

	def field(Member m) '''
		private «attributeJavaType(m)» «attributeName(m)»;
	'''

	def getter(Member m) '''
		public «attributeJavaType(m)» «getterName(m)»() {
			return this.«attributeName(m)»;
		}
	'''

	def setter(Member m) '''
		public void «setterName(m)»(«attributeJavaType(m)» «attributeName(m)») {
			this.«attributeName(m)» = «attributeName(m)»;
		}
	'''

	def attributeJavaType(Member m) {
		val nativeType = nativeTypeName(m)
		val javaType = native2JavaType(nativeType)

		if (isArray(m)) {
			if(m instanceof IntegerMember) {
				if(m.typename.equals("uint8_t") || m.typename.equals("int8_t")) {
					return "java.nio.ByteBuffer";
				}
			}
			if(m instanceof StringMember) {
				return javaType
			}
			return "java.util.ArrayList<" + box(javaType) + ">";
		} else {
			return javaType
		}
	}

	def box(String type) {
		switch (type) {
			case "byte": "Byte"
			case "short": "Short"
			case "int": "Integer"
			case "long": "Long"
			case "float": "Float"
			case "double": "Double"
			case "boolean": "Boolean"
			default: type
		}
	}

	def unbox(String type) {
		switch (type) {
			case "Short": "short"
			case "Int": "int"
			case "Long": "long"
			case "Float": "float"
			case "Double": "double"
			default: type
		}
	}

	def nativeTypeName(Member m) {
		switch (m) {
			ComplexTypeMember: javaType((m as ComplexTypeMember).type)
			IntegerMember: (m as IntegerMember).typename
			FloatMember: (m as FloatMember).typename
			StringMember: (m as StringMember).typename
			default: throw new RuntimeException("Unsupported member type: " + m)
		}
	}

	def native2JavaType(String type) {
		switch (type) {
			case "uint8_t": "int"
			case "int8_t": "int"
			case "uint16_t": "int"
			case "int16_t": "int"
			case "int32_t": "int"
			case "uint32_t": "int"
			case "int64_t": "long"
			case "uint64_t": "long"
			case "char": "String"
			case "bool": "boolean"
			default: type
		}
	}

	def javaType(ComplexTypeDeclaration type) {
		val pkg = type.eContainer as Package
		if (pkg != null && !pkg.name.empty) {
			return pkg.name + "." + type.name
		}
		return type.name
	}
}
