/*
 * generated by Structs4Java 2.10.0
 */
package org.structs4java.formatting2

import com.google.inject.Inject
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument
import org.structs4java.services.Structs4JavaDslGrammarAccess
import org.structs4java.structs4JavaDsl.EnumDeclaration
import org.structs4java.structs4JavaDsl.Import
import org.structs4java.structs4JavaDsl.Member
import org.structs4java.structs4JavaDsl.StructDeclaration
import org.structs4java.structs4JavaDsl.Item

class Structs4JavaDslFormatter extends AbstractFormatter2 {

	@Inject extension Structs4JavaDslGrammarAccess

	def dispatch void format(org.structs4java.structs4JavaDsl.Package _package,
		extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Import imports : _package.getImports()) {
			imports.format;
		}
		for (StructDeclaration structs : _package.getStructs()) {
			structs.format;
		}
		for (EnumDeclaration enums : _package.getEnums()) {
			enums.format;
		}

		_package.regionFor.keyword(";").append[newLines = 2]
		_package.regionFor.keyword(";").prepend[noSpace]
	}

	def dispatch void format(StructDeclaration structDeclaration, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Member members : structDeclaration.getMembers()) {
			members.format;
		}

		structDeclaration.regionFor.keyword("{").prepend[newLine].append[newLine]
		structDeclaration.regionFor.keyword("}").append[newLines = 2]

		val open = structDeclaration.regionFor.keyword("{")
		val close = structDeclaration.regionFor.keyword("}")
		interior(open, close)[indent]
	}

	def dispatch void format(Import imp, extension IFormattableDocument document) {
		if ((imp.eContainer as org.structs4java.structs4JavaDsl.Package).getImports().last == imp) {
			imp.regionFor.keyword(";").prepend[noSpace].append[newLines = 2]
		} else {
			imp.regionFor.keyword(";").prepend[noSpace].append[newLine]
		}
	}

	def dispatch void format(Member member, extension IFormattableDocument document) {
		member.regionFor.keyword(";").prepend[noSpace].append[newLine]
	}

	def dispatch void format(EnumDeclaration _enum, extension IFormattableDocument document) {
		_enum.regionFor.keyword("{").prepend[newLine].append[newLine]
		_enum.regionFor.keyword("}").prepend[newLine].append[newLines = 2]

		for (Item itm : _enum.items) {
			itm.format
		}

		val open = _enum.regionFor.keyword("{")
		val close = _enum.regionFor.keyword("}")
		interior(open, close)[indent]
	}

	def dispatch void format(Item item, extension IFormattableDocument document) {
		val colon = item.regionFor.keyword(",")
		if (colon !== null) {
			colon.append[newLine]
		}
	}
}
